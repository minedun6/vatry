<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Transfer;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * TransferRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransferRepository extends EntityRepository
{

    public function getCommunesByZipCode($zipCode = null, $like = null, $type = null)
    {
        $qb = $this->createQueryBuilder('l')
            ->select('l.id, l.name, l.zipCode')
            ->where('1=1');

        if ($zipCode) {
            $qb = $qb->andWhere('l.zipCode = :zipCode ')
                ->setParameter('zipCode', $zipCode);
        }

        if ($like) {
            $qb = $qb->andWhere('l.name like :like ')
                ->setParameter('like', "%$like%");
        }

        return $qb->getQuery()->getArrayResult();
    }

    public function getTransfertByFlightAndDateAndType($flight, $date, $typeTransfert)
    {
        $statut = array(Transfer::STATUS_PAID, Transfer::STATUS_PAID_RELAY, Transfer::STATUS_PAID_B2B, Transfer::STATUS_VALID_B2B);
        $qb = $this->createQueryBuilder('t')
            ->Where('t.flight = :flight or t.flight2 = :flight')
            ->setParameter('flight', $flight)
            ->andWhere('t.pickupDate like :like or t.pickupDate2 like :like')
            ->setParameter('like', $date . "%")
            ->andWhere('t.status IN (:statut)')
            ->setParameter('statut', $statut)
            ->andWhere('t.type = :type')
            ->setParameter('type', $typeTransfert);

        return $qb->getQuery()->getResult();

    }

    public function getTransfersForBalance($date)
    {
        $qb = $this->_em->createQueryBuilder()
            ->select('t')
            ->from($this->_entityName, 'alias');

        $roles = ['agent', 'agentAdmin', 'secretary', 'ADMIN'];
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
            ->select(array(
                    'SUM(t.price) as amount',
                    'p.type as payment_type',
                    'u.id as user_id',
                    't.createdAt as date')
            )
            ->from('AppBundle:Transfer', 't')
            ->leftJoin('t.payment', 'p')
            ->join('t.createdBy', 'u')
            ->where('u.type IN (:roles)')
            ->setParameter('roles', $roles)
            ->andWhere('t.status = :paid')
            ->setParameter('paid', 'paid')
            ->andWhere('t.createdAt LIKE :date')
            ->setParameter('date', '%' . $date->format('Y-m-d') . '%')
            ->groupBy('u.id', 'p.type')
            ->getQuery();
        $transfers = $query->getResult();

        return $transfers;
    }


    public function periode_encaissement_agent($day1, $day2, $user)
    {
        $qb = $this->createQueryBuilder('t')
            ->where('t.createdAt BETWEEN :day1 AND :day2')
            ->setParameter('day1', $day1->format('Y-m-d H:i:s'))
            ->setParameter('day2', $day2->format('Y-m-d H:i:s'))
            ->andWhere('t.status = :statut')
            ->setParameter('statut', Transfer::STATUS_PAID)
            ->andWhere('t.createdBy = :user')
            ->setParameter('user', $user);
        return $qb->getQuery()->getResult();
    }

    public function encaissement_jours($date, $user)
    {
        $qb = $this->createQueryBuilder('t')
            ->Where('t.createdBy = :user')
            ->setParameter('user', $user)
            ->andWhere('t.createdAt like :like ')
            ->setParameter('like', $date . "%")
            ->andWhere('t.status = :statut')
            ->setParameter('statut', Transfer::STATUS_PAID);;

        return $qb->getQuery()->getResult();
    }

    public function getTotalReceipe($start_date = null, $end_date = null)
    {
        $end_date ? $end_date->setTime(23, 59, 59) : null;
        $payment_types = [Transfer::STATUS_PAID];
        $em = $this->getEntityManager();
        $balance_query = $em->createQueryBuilder()
            ->select(array(
                    'SUM(b.balance) as received',
                    'u.type as user_type')
            )
            ->from('AppBundle:Balance', 'b')
            ->join('b.user', 'u');

        $query = $em->createQueryBuilder()
            ->select(array(
                    'SUM(t.price) as amount',
                    'p.type as payment_type',
                    'u.type as user_type')
            )
            ->from('AppBundle:Transfer', 't')
            ->leftJoin('t.payment', 'p')
            ->join('t.createdBy', 'u')
            ->andWhere('t.status IN (:payement_types)')
            ->andWhere('t.price IS NOT NULL')
            ->setParameter('payement_types', $payment_types);
        if ($start_date != null && $end_date != null) {
            $query->andWhere('t.createdAt >= :start_date AND t.createdAt <= :end_date')
                ->setParameter('start_date', $start_date->format('Y-m-d H:i:s'))
                ->setParameter('end_date', $end_date->format('Y-m-d H:i:s'));
            $balance_query->andWhere('b.balanceDate >= :start_date AND b.balanceDate <= :end_date')
                ->setParameter('start_date', $start_date->format('Y-m-d H:i:s'))
                ->setParameter('end_date', $end_date->format('Y-m-d H:i:s'));
        } elseif ($start_date != null) {
            $query->andWhere('t.createdAt LIKE :start_date')
                ->setParameter('start_date', '%' . $start_date->format('Y-m-d') . '%');
            $balance_query->andWhere('b.balanceDate LIKE :start_date')
                ->setParameter('start_date', '%' . $start_date->format('Y-m-d') . '%');
        }
        $query = $query->groupBy('u.type', 'p.type')
            ->getQuery();
        $balance_query = $balance_query->groupBy('u.type')
            ->getQuery();

        $balances = $balance_query->getResult();
        $transfers = $query->getResult();

        $results = [];
        foreach ($transfers as $transfer) {
            if ($transfer['payment_type'] == Transfer::TYPE_CACHE)
                $payment_type = Transfer::TYPE_CACHE;
            elseif ($transfer['payment_type'] == Transfer::TYPE_CREDIT_CARD)
                $payment_type = Transfer::TYPE_CREDIT_CARD;
            else
                $payment_type = 'vad';

            $results[User::getUserSource($transfer['user_type'])][$payment_type] = number_format((double)$transfer['amount'], 2, '.', '');
            foreach ($balances as $balance) {
                if ($transfer['user_type'] == $balance['user_type']) {
                    if ($payment_type == Transfer::TYPE_CACHE) {
                        $results[User::getUserSource($transfer['user_type'])][$payment_type] += number_format((double)$balance['received'], 2, '.', '');
                    }
                }
            }
        }

        return $results;
    }

    public function getB2BReceipe($start_date = null, $end_date = null)
    {
        $end_date ? $end_date->setTime(23, 59, 59) : null;
        $status = [Transfer::STATUS_PAID_B2B];
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
            ->select(array(
                    'SUM(i.netPrice) as amount',
                    'p.type as payment_type'
                )
            )
            ->from('AppBundle:B2BInvoice', 'i')
            ->leftJoin('i.transfer', 't')
            ->join('t.payment', 'p')
            ->where('t.status IN (:status)')
            ->andWhere('i.netPrice IS NOT NULL')
            ->setParameter('status', $status);
        if ($start_date != null && $end_date != null) {
            $query->andWhere('t.createdAt >= :start_date AND t.createdAt <= :end_date')
                ->setParameter('start_date', $start_date->format('Y-m-d H:i:s'))
                ->setParameter('end_date', $end_date->format('Y-m-d H:i:s'));
        } elseif ($start_date != null) {
            $query->andWhere('t.createdAt LIKE :start_date')
                ->setParameter('start_date', '%' . $start_date->format('Y-m-d') . '%');
        }
        $query = $query->groupBy('payment_type')->getQuery();
        $transfers = $query->getResult();
        $results = [];
        foreach ($transfers as $transfer) {
            if ($transfer['payment_type'] == Transfer::TYPE_CACHE)
                $payment_type = Transfer::TYPE_CACHE;
            elseif ($transfer['payment_type'] == Transfer::TYPE_CREDIT_CARD)
                $payment_type = Transfer::TYPE_CREDIT_CARD;
            elseif ($transfer['payment_type'] == Transfer::TYPE_CHEQUE)
                $payment_type = Transfer::TYPE_CHEQUE;
            elseif ($transfer['payment_type'] == Transfer::TYPE_VIREMENT)
                $payment_type = Transfer::TYPE_VIREMENT;
            else
                $payment_type = 'vad';

            $results[$payment_type] = number_format((double)$transfer['amount'], 2, '.', '');
        }

        return $results;
    }

    public function transfertParPeriode($day1, $day2, User $user = null)
    {
        $status = array(Transfer::STATUS_PAID, Transfer::STATUS_PAID_B2B, Transfer::STATUS_VALID_B2B, Transfer::STATUS_PAID_RELAY);
        $qb = $this->createQueryBuilder('p')
            ->where('p.createdAt >= :day1 AND p.createdAt <= :day2')
            ->setParameter('day1', $day1->format('Y-m-d H:i:s'))
            ->setParameter('day2', $day2->format('Y-m-d H:i:s'))
            ->andWhere('p.status IN (:statut)');
        if (!isset($user)) {
            $qb->setParameter('statut', $status);
        } else {
            $qb->setParameter('statut', Transfer::STATUS_PAID);
        }
        if (isset($user)) {
            $qb->andWhere('p.createdBy = :user')
                ->setParameter('user', $user);
        }
        return $qb->getQuery()->getResult();
    }

    public function findPartnerAgencyB2B($user, $status = array(), $affected = null)
    {
         $qb = $this->createQueryBuilder('t')
            ->where('t.status in (:status)');
        if ($affected)
            $qb->andWhere('t.affectedTo = :user and t.createdBy != t.affectedTo');
        else
            $qb->andWhere('t.affectedTo = :user or t.createdBy = :user');

        $qb
            ->setParameter('user', $user)
            ->setParameter('status', $status)
            ->orderBy('t.createdAt', 'DESC');
        return $qb->getQuery()->getResult();
    }


    public function findRC($user, $status = array(), $affected = null)
    {
         $qb = $this->createQueryBuilder('t')
            ->where('t.status in (:status)');
        if ($affected)
            $qb->andWhere('t.affectedTo = :user and t.createdBy != t.affectedTo');
        else
            $qb->andWhere('t.affectedTo = :user or t.createdBy = :user');

        $qb
            ->setParameter('user', $user)
            ->setParameter('status', $status)
            ->orderBy('t.createdAt', 'DESC');
        return $qb->getQuery()->getResult();
    }


    public function getPassengersNumberPerTransferWay($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->select(array('t.pickupDate as date', 't.id', 't.qty', 't.qtyChild', 't.qtyBaby', 't.direction'))
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getPassengersNumberPerFlightsDestination($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->join('t.flight', 'f')
            ->select(array('t.pickupDate as date', 't.id', 't.createdAt', 'f.num', 't.qty', 't.qtyChild', 't.qtyBaby', 'f.toLocation'))
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->andwhere('f.fromLocation = :vatry')
            ->setParameter('vatry', 'vatry')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getPassengersNumberPerFlightsOrigin($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->join('t.flight', 'f')
            ->select(array('t.pickupDate as date', 't.id', 't.createdAt', 'f.num', 't.qty', 't.qtyChild', 't.qtyBaby', 'f.fromLocation'))
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->andwhere('f.toLocation = :vatry')
            ->setParameter('vatry', 'vatry')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getPassengersNumberPerPrestationType($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->select(array('t.pickupDate as date', 't.id', 't.pickupDate', 't.qty', 't.qtyChild', 't.qtyBaby', 't.type'))
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getPassengersNumberPerPickUpOrDropLocation($startdate, $enddate, $sens)
    {
        $qb = $this->createQueryBuilder('t')
            ->join('t.location', 'l')
            ->select(array('t.pickupDate as date', 't.id', 't.pickupDate', 'l.name', 't.direction', 't.qty', 't.qtyChild', 't.qtyBaby'))
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->andwhere('t.direction=:sens')
            ->setParameter('sens', $sens)
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);

        return $qb->getQuery()->getResult();
    }

    public function getPassengersNumberPickupOrDropOfReturnTransfers($startdate, $enddate, $sens)
    {
        $qb = $this->createQueryBuilder('t')
            ->join('t.location2', 'l')
            ->select(array('t.pickupDate2 as date', 't.id', 'l.name', 't.direction', 't.qty', 't.qtyChild', 't.qtyBaby'))
            ->where('t.pickupDate2 >=:day1 AND t.pickupDate2 <=:day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->andwhere('t.direction=:sens')
            ->setParameter('sens', $sens)
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }


    public function getPaidTransfers($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getOrdersNumberPerPrestationType($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->select(array('t.pickupDate as date', 't.id', 't.type'))
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getOrdersNumberPerPickUpOrDrop($startdate, $enddate, $sens)
    {
        $qb = $this->createQueryBuilder('t')
            ->join('t.location', 'l')
            ->select(array('t.pickupDate as date', 't.id', 't.direction', 'l.name'))
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->andwhere('t.direction =:sens')
            ->setParameter('sens', $sens)
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getOrdersNumberPerPassengers($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->select(array('t.pickupDate as date', 't.id', 't.qty,t.qtyChild,t.qtyBaby'))
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();

    }

    /* public function getRevenuesBySource($startdate, $enddate)
     {
         $qb = $this->createQueryBuilder('t')
             ->join('t.createdBy', 'u')
             ->select(array('t.pickupDate as date', 't.id', 'u.type', 't.price'))
             ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
             ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
             ->setParameter('statuspaid', Transfer::STATUS_PAID)
             ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
             ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
             ->setParameter('day1', $startdate)
             ->setParameter('day2', $enddate);
         return $qb->getQuery()->getResult();
     } */

    public function getRevenuesByPrestationType($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->select(array('t as transfert, t.pickupDate as date', 't.id', 't.type', 't.price'))
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getRevenuesByPickupOrDrop($startdate, $enddate, $sens)
    {
        $qb = $this->createQueryBuilder('t')
            ->join('t.location', 'l')
            ->select(array('t as transfert, t.pickupDate as date', 't.id', 't.direction', 'l.name', 't.price'))
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b')
            ->andwhere('t.direction=:sens')
            ->setParameter('sens', $sens)
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getRevenuesByPaymentType($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            /*->join('t.payment', 'p')
            ->select(array('t.pickupDate as date', 't.id', 'p.type', 't.price'))*/
            ->andWhere('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getTransfersByPeriod($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->select('t.pickupDate as date', 't.createdAt,t.price')
            ->where('t.pickupDate >= :day1 AND t.pickupDate <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }


    public function getPassengersNumberPerTransferWayOfReturnTransfers($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->select(array('t.pickupDate2 as date', 't.id', 't.qty', 't.qtyChild', 't.qtyBaby', 't.direction'))
            ->where('t.pickupDate2 >= :day1 AND t.pickupDate2 <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getPassengersNumberPerFlightDestinationOfReturnTransfers($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->join('t.flight2', 'f')
            ->select(array('t.pickupDate2 as date', 't.id', 'f.num', 't.qty', 't.qtyChild', 't.qtyBaby', 'f.toLocation'))
            ->Where('t.pickupDate2 >= :day1 AND t.pickupDate2 <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->andwhere('f.fromLocation = :vatry')
            ->setParameter('vatry', 'vatry')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getPassengersNumberPerFlightOriginOfReturnTransfers($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->join('t.flight2', 'f')
            ->select(array('t.pickupDate2 as date', 't.id', 'f.num', 't.qty', 't.qtyChild', 't.qtyBaby', 'f.fromLocation'))
            ->Where('t.pickupDate2 >= :day1 AND t.pickupDate2 <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b ')
            ->andwhere('f.toLocation = :vatry')
            ->setParameter('vatry', 'vatry')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    public function getPassengersNumberPerPrestationTypeOfReturnTransfers($startdate, $enddate)
    {
        $qb = $this->createQueryBuilder('t')
            ->select(array('t.pickupDate2 as date', 't.id', 't.qty', 't.qtyChild', 't.qtyBaby', 't.type'))
            ->where('t.pickupDate2 >= :day1 AND t.pickupDate2 <= :day2')
            ->andwhere('t.status=:statuspaid OR t.status=:statuspaidb2b OR t.status=:statusvalidb2b')
            ->setParameter('statuspaid', Transfer::STATUS_PAID)
            ->setParameter('statuspaidb2b', Transfer::STATUS_PAID_B2B)
            ->setParameter('statusvalidb2b', Transfer::STATUS_VALID_B2B)
            ->setParameter('day1', $startdate)
            ->setParameter('day2', $enddate);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param null $user_id
     * Get current transfers
     * for a airport partner if user_id is set
     * else get all current transfers
     * @return array
     */
    public function currentTransfer($user_id = null, $status)
    {
        $status = [Transfer::STATUS_PAID, Transfer::STATUS_PAID_B2B];
        $timestamp = strtotime('today midnight');
        $today = date('Y-m-d H:i:s', $timestamp);
        $query = $this->createQueryBuilder('t')
            ->where('t.pickupDate >= :today')
            ->orWhere('t.pickupDate2 >= :today')
            ->setParameter('today', $today)
            ->andWhere('t.status in (:status)')
            ->setParameter('status', $status)
            ->orderBy('t.createdAt', 'DESC');
        if ($user_id != null) {
            $query->andWhere('t.partner = :partner_id')
                ->setParameter('partner_id', $user_id);
        }
        $query = $query->getQuery();
        $transfers = $query->getResult();

        return $transfers;
    }

    /**
     * @param null $user_id
     * Get all archived trasnfers
     * for an airport partner id userd_id is set
     * else get all archived transfers
     * @return array
     */
    public function archivedTransfer($user_id = null, $status)
    {
        $timestamp = strtotime('today midnight');
        $today = date('Y-m-d H:i:s', $timestamp);
        $query = $this->createQueryBuilder('t')
            ->where('t.roundTrip = 0 AND t.pickupDate < :today')
            ->orWhere('t.roundTrip = 1 AND t.pickupDate2 < :today')
            ->setParameter('today', $today)
            ->andWhere('t.status in (:status)')
            ->setParameter('status', $status)
            ->orderBy('t.createdAt', 'DESC');
        if ($user_id != null) {
            $query->andWhere('t.partner = :partner_id')
                ->setParameter('partner_id', $user_id);
        }
        $query = $query->getQuery();
        $transfers = $query->getResult();

        return $transfers;
    }

    /**
     * Get all trasnfers
     * for a monthly invoice
     */
    public function getTransfertMonthlyInvoice($monthlyInvoice)
    {
        $qb = $this->createQueryBuilder('t')
            ->select('t')
            ->join('t.b2bEnvoice', 'b')
            ->where('b.monthlyB2bEnvoice = :monthlyInvoice ')
            ->setParameter('monthlyInvoice', $monthlyInvoice);

        return $qb->getQuery()->getResult();
    }

    public function getAllTransferPerPeriod($start_date = null, $end_date = null)
    {
        $status = [Transfer::STATUS_PAID, Transfer::STATUS_PAID_B2B];
        $qb = $this->createQueryBuilder('t');
        $qb->where('t.createdAt >= :day1 AND t.createdAt <= :day2')
            ->andWhere('t.status in (:status)')
            ->setParameter('day1', $start_date)
            ->setParameter('day2', $end_date)
            ->setParameter('status', $status);


        return $qb->getQuery()->getResult();
    }
}
