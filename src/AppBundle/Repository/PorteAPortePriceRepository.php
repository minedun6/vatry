<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Location;
use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Agglomeration;

/**
 * PorteAPortePriceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PorteAPortePriceRepository extends EntityRepository
{   use CountTrait;
    use ZipCodeTrait;

    use LocationByZipCodeTrait;

    public function getAvailableTownList(){
        $qb = $this->createQueryBuilder('l')
            ->select('l');
        return $qb->getQuery()->getResult();
    }

    public function getLocationsForParisTransfer($zipCode){
        $agglomeration = $this->_em->getReference(Agglomeration::class,1);
        $qb = $this->createQueryBuilder('p')
            ->andWhere('p.agglomeration = :agglomeration')
            ->setParameter('agglomeration',$agglomeration);

        if ($zipCode){
            $qb = $qb
                ->andWhere('p.zipCode = :zipCode ')
                ->setParameter('zipCode',$zipCode);
        }

        return $qb->getQuery()->getResult();
    }

    public function getZipCodeForParisTransfer($like){
        $agglomeration = $this->_em->getReference(Agglomeration::class,1);
        $qb = $this->createQueryBuilder('l')
            ->select('DISTINCT l.zipCode')
            ->andWhere('l.agglomeration = :agglomeration')
            ->setParameter('agglomeration',$agglomeration);

        if ($like){
            $qb = $qb
                ->andWhere('l.zipCode like :like ')
                ->setParameter('like',"%$like%");
        }

        return $qb->getQuery()->getScalarResult();
    }

}
